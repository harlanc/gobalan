// Code generated by protoc-gen-go. DO NOT EDIT.
// source: balance.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BalanceType int32

const (
	BalanceType_RoundRobin         BalanceType = 0
	BalanceType_OptimalPerformance BalanceType = 1
)

var BalanceType_name = map[int32]string{
	0: "RoundRobin",
	1: "OptimalPerformance",
}

var BalanceType_value = map[string]int32{
	"RoundRobin":         0,
	"OptimalPerformance": 1,
}

func (x BalanceType) String() string {
	return proto.EnumName(BalanceType_name, int32(x))
}

func (BalanceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee25a00b628521b1, []int{0}
}

type PickRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickRequest) Reset()         { *m = PickRequest{} }
func (m *PickRequest) String() string { return proto.CompactTextString(m) }
func (*PickRequest) ProtoMessage()    {}
func (*PickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee25a00b628521b1, []int{0}
}

func (m *PickRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PickRequest.Unmarshal(m, b)
}
func (m *PickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PickRequest.Marshal(b, m, deterministic)
}
func (m *PickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickRequest.Merge(m, src)
}
func (m *PickRequest) XXX_Size() int {
	return xxx_messageInfo_PickRequest.Size(m)
}
func (m *PickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PickRequest proto.InternalMessageInfo

type PickResponse struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickResponse) Reset()         { *m = PickResponse{} }
func (m *PickResponse) String() string { return proto.CompactTextString(m) }
func (*PickResponse) ProtoMessage()    {}
func (*PickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee25a00b628521b1, []int{1}
}

func (m *PickResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PickResponse.Unmarshal(m, b)
}
func (m *PickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PickResponse.Marshal(b, m, deterministic)
}
func (m *PickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickResponse.Merge(m, src)
}
func (m *PickResponse) XXX_Size() int {
	return xxx_messageInfo_PickResponse.Size(m)
}
func (m *PickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PickResponse proto.InternalMessageInfo

func (m *PickResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PickResponse) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.BalanceType", BalanceType_name, BalanceType_value)
	proto.RegisterType((*PickRequest)(nil), "proto.PickRequest")
	proto.RegisterType((*PickResponse)(nil), "proto.PickResponse")
}

func init() { proto.RegisterFile("balance.proto", fileDescriptor_ee25a00b628521b1) }

var fileDescriptor_ee25a00b628521b1 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4a, 0xcc, 0x49,
	0xcc, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xbc, 0x5c,
	0xdc, 0x01, 0x99, 0xc9, 0xd9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x4a, 0x46, 0x5c, 0x3c,
	0x10, 0x6e, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x81, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x53, 0x66, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x41, 0x7e, 0x51, 0x89,
	0x04, 0x13, 0x58, 0x04, 0xcc, 0xd6, 0x32, 0xe5, 0xe2, 0x76, 0x82, 0x18, 0x1d, 0x52, 0x59, 0x00,
	0xd2, 0xc2, 0x15, 0x94, 0x5f, 0x9a, 0x97, 0x12, 0x94, 0x9f, 0x94, 0x99, 0x27, 0xc0, 0x20, 0x24,
	0xc6, 0x25, 0xe4, 0x5f, 0x50, 0x92, 0x99, 0x9b, 0x98, 0x13, 0x90, 0x5a, 0x94, 0x96, 0x5f, 0x94,
	0x0b, 0x52, 0x29, 0xc0, 0x68, 0x64, 0xcb, 0xc5, 0x1e, 0x14, 0xe0, 0x0c, 0xb2, 0x4d, 0xc8, 0x08,
	0xc1, 0x14, 0x82, 0x38, 0x4f, 0x0f, 0xc9, 0x51, 0x52, 0xc2, 0x28, 0x62, 0x10, 0x97, 0x25, 0xb1,
	0x81, 0xc5, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x3a, 0x1b, 0x1e, 0xd7, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCPickClient is the client API for RPCPick service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPickClient interface {
	RPCPick(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*PickResponse, error)
}

type rPCPickClient struct {
	cc *grpc.ClientConn
}

func NewRPCPickClient(cc *grpc.ClientConn) RPCPickClient {
	return &rPCPickClient{cc}
}

func (c *rPCPickClient) RPCPick(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*PickResponse, error) {
	out := new(PickResponse)
	err := c.cc.Invoke(ctx, "/proto.RPCPick/RPCPick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPickServer is the server API for RPCPick service.
type RPCPickServer interface {
	RPCPick(context.Context, *PickRequest) (*PickResponse, error)
}

// UnimplementedRPCPickServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPickServer struct {
}

func (*UnimplementedRPCPickServer) RPCPick(ctx context.Context, req *PickRequest) (*PickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCPick not implemented")
}

func RegisterRPCPickServer(s *grpc.Server, srv RPCPickServer) {
	s.RegisterService(&_RPCPick_serviceDesc, srv)
}

func _RPCPick_RPCPick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPickServer).RPCPick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RPCPick/RPCPick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPickServer).RPCPick(ctx, req.(*PickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPick_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RPCPick",
	HandlerType: (*RPCPickServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPCPick",
			Handler:    _RPCPick_RPCPick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "balance.proto",
}
