// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HeartbeatRequest struct {
	CpuUsageRate         float32  `protobuf:"fixed32,1,opt,name=cpu_usage_rate,json=cpuUsageRate,proto3" json:"cpu_usage_rate,omitempty"`
	MemoryUsageRate      float32  `protobuf:"fixed32,2,opt,name=memory_usage_rate,json=memoryUsageRate,proto3" json:"memory_usage_rate,omitempty"`
	BandwidthUsageRate   float32  `protobuf:"fixed32,3,opt,name=bandwidth_usage_rate,json=bandwidthUsageRate,proto3" json:"bandwidth_usage_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetCpuUsageRate() float32 {
	if m != nil {
		return m.CpuUsageRate
	}
	return 0
}

func (m *HeartbeatRequest) GetMemoryUsageRate() float32 {
	if m != nil {
		return m.MemoryUsageRate
	}
	return 0
}

func (m *HeartbeatRequest) GetBandwidthUsageRate() float32 {
	if m != nil {
		return m.BandwidthUsageRate
	}
	return 0
}

type HeartbeatResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatResponse.Unmarshal(m, b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
}
func (m *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(m, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return xxx_messageInfo_HeartbeatResponse.Size(m)
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HeartbeatRequest)(nil), "proto.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "proto.HeartbeatResponse")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcb, 0x4f, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd3, 0x18, 0xb9, 0x04, 0x3c,
	0x52, 0x13, 0x8b, 0x4a, 0x92, 0x52, 0x13, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x54, 0xb8, 0xf8, 0x92, 0x0b, 0x4a, 0xe3, 0x4b, 0x8b, 0x13, 0xd3, 0x53, 0xe3, 0x8b, 0x12, 0x4b,
	0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x98, 0x82, 0x78, 0x92, 0x0b, 0x4a, 0x43, 0x41, 0x82, 0x41,
	0x89, 0x25, 0xa9, 0x42, 0x5a, 0x5c, 0x82, 0xb9, 0xa9, 0xb9, 0xf9, 0x45, 0x95, 0xc8, 0x0a, 0x99,
	0xc0, 0x0a, 0xf9, 0x21, 0x12, 0x08, 0xb5, 0x06, 0x5c, 0x22, 0x49, 0x89, 0x79, 0x29, 0xe5, 0x99,
	0x29, 0x25, 0x19, 0xc8, 0xca, 0x99, 0xc1, 0xca, 0x85, 0xe0, 0x72, 0x70, 0x1d, 0x4a, 0xc2, 0x5c,
	0x82, 0x48, 0xee, 0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0x0a, 0xe4, 0xe2, 0x84, 0x0b, 0x0a,
	0xb9, 0x70, 0xf1, 0x06, 0xa7, 0xe6, 0xa5, 0x20, 0x04, 0xc4, 0x21, 0x5e, 0xd3, 0x43, 0xf7, 0x8f,
	0x94, 0x04, 0xa6, 0x04, 0xc4, 0x40, 0x0d, 0xc6, 0x24, 0x36, 0xb0, 0x94, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xee, 0xd4, 0x37, 0x61, 0x1c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatClient interface {
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Heartbeat_SendHeartbeatClient, error)
}

type heartbeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatClient(cc *grpc.ClientConn) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Heartbeat_SendHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Heartbeat_serviceDesc.Streams[0], "/proto.Heartbeat/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartbeatSendHeartbeatClient{stream}
	return x, nil
}

type Heartbeat_SendHeartbeatClient interface {
	Send(*HeartbeatRequest) error
	CloseAndRecv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type heartbeatSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *heartbeatSendHeartbeatClient) Send(m *HeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *heartbeatSendHeartbeatClient) CloseAndRecv() (*HeartbeatResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartbeatServer is the server API for Heartbeat service.
type HeartbeatServer interface {
	SendHeartbeat(Heartbeat_SendHeartbeatServer) error
}

// UnimplementedHeartbeatServer can be embedded to have forward compatible implementations.
type UnimplementedHeartbeatServer struct {
}

func (*UnimplementedHeartbeatServer) SendHeartbeat(srv Heartbeat_SendHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HeartbeatServer).SendHeartbeat(&heartbeatSendHeartbeatServer{stream})
}

type Heartbeat_SendHeartbeatServer interface {
	SendAndClose(*HeartbeatResponse) error
	Recv() (*HeartbeatRequest, error)
	grpc.ServerStream
}

type heartbeatSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *heartbeatSendHeartbeatServer) SendAndClose(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *heartbeatSendHeartbeatServer) Recv() (*HeartbeatRequest, error) {
	m := new(HeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _Heartbeat_SendHeartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}
